何为闭包

函数内部又定义了一个函数，这个子函数就可以称为闭包。

闭包的特点

闭包的一个特点就是闭包内部可以引用外部函数的变量。

原理

要理解闭包的原理，最重要的是要理解JavaScript的作用域链机制。

作用域
js中作用域分为两种，全局作用域和函数作用域（局部作用域），此外js遵循的是静态作用域规则。
作用域链
由作用域形成的链条就称为作用域链，但这个作用域链存储的是指向各个活动对象的指针。下面我们看下作用域链的具体形成过程：全局作用域是一直存在的，函数作用域只有在执行到它的时候才会生成，当函数被定义时，函数的[[scope]]属性会存储该函数外部的作用域下的活动对象（指针），包括全局变量对象，所以可能是个指针列表。然后我们在调用函数时，首先会为它创建一个执行环境，然后创建作用域链，这个作用域链先是复制[[scope]]属性的值，然后把自己的活动对象推入作用域链的前端，这个活动对象由该函数作用域下的变量构成，这样函数的作用域链就形成了。
举个栗子：

var g = 1;
function out(){
var out = "out";
return function(){
    var inner = "inner";
    return out;
}
}
示例图



示例图解释了为什么闭包拥有保存外部函数变量的特性

当函数执行完毕，作用域链就会被销毁，之前占用的内存也会被释放，但如果函数内部定义了一个子函数，这个时候子函数的[[scope]]属性就会存储着指向父函数活动对象的指针，活动对象由于仍被子函数引用，所以不会被销毁，父函数的变量仍旧没有被消除。变量out的值仍旧是“out”。

// 可通过如下代码验证
var abc = out();
alert(abc());
结果：


闭包的应用

闭包最常用的一个地方就是保留父函数的变量，这个在上面的例子中已经说明
闭包的另一个应用是模拟块级作用域和私有变量，这是应用函数拥有自己的作用域的特点，在不想成为公有变量的变量外报上一层匿名函数并且立即执行

(function(){
// 这里是块级作用域
})();